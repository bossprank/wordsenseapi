You are absolutely right! We've covered a lot of ground and have iteratively built up a comprehensive set of requirements. Condensing this into a single, well-structured Markdown specification is a great idea. This will serve as a clear "canvas" or blueprint for your coding agent.

I believe I have all the necessary details from our conversation to generate this full specification. We've touched on:
* The overall goal.
* The specific Firestore collection (`GeneratedWordLists`) and its detailed document structure, including the latest additions for instruction file references and Gemini API parameters.
* The four key admin screens (Generate New, View Lists, List Details, Edit Metadata), their purposes, UI elements, and functionalities.
* The backend API logic required to support these screens.
* The textual wireframes for each screen.
* Integration points like `master_categories` and Gemini API parameter handling.

I will now compile this into a single Markdown document. Given the depth, it will be fairly extensive, but breaking it down into logical sections as we've been doing (Goal, Firestore Structure, Screens, Backend, Wireframes, etc.) will keep it organized.

Here is the full specification in Markdown:

```markdown
# Full Specification: Admin Panel for Vocabulary List Generation & Management

**Version:** 1.0
**Date:** May 8, 2025
**Project:** Language Learning Application - Admin Vocabulary Generation Module

## 1. Introduction & Project Goal

This document outlines the specifications for an admin panel feature within a language learning application. The primary goal is to provide administrators with a comprehensive interface to:
1.  Generate CEFR-level specific vocabulary lists using the Google Gemini API.
2.  Store these generated lists, along with detailed generation parameters and workflow status, in a dedicated Google Cloud Firestore collection.
3.  Manage the lifecycle of these generated lists, including viewing, filtering, editing metadata, initiating re-generation with modified parameters, and deleting lists.

This system aims to streamline the creation of curated vocabulary sets, ensuring transparency in the generation process and facilitating a clear workflow from initial creation to potential use in production.

## 2. Core Admin Feature

Vocabulary List Generation and Management.

## 3. Technology Stack

* **Frontend:** HTML, CSS, JavaScript (likely integrated with Flask using templating engines like Jinja2).
* **Backend:** Flask (Python).
* **AI Service:** Google Gemini API (accessed via Firebase Studio integration or the appropriate Google Gen AI SDK for Python).
* **Database:** Google Cloud Firestore.

## 4. Key Firestore Collection: `GeneratedWordLists`

This is the central collection for storing all generated vocabulary lists and their associated data.

* **Collection Name:** `GeneratedWordLists`
* **Firebase Integration:** The application will use the `google-cloud-firestore` Python client library. Authentication will rely on Google Cloud's standard mechanisms (e.g., Application Default Credentials). Refer to `Specification_Word_Data_Structure_v1.5.md` for existing Firestore connection patterns within the broader project.

### 4.1. Document Structure (`GeneratedWordLists`)

Each document in this collection represents a single generated vocabulary list.

* **Document ID:** Auto-generated by Firestore (this serves as the internal primary key).
* **Fields:**

    ```json
    {
      "generation_parameters": {
        "list_readable_id": "ID-A1-250508-001", // String: Backend-generated, unique, human-readable ID (e.g., {LANG}-{CEFR}-{YYMMDD}-{SEQ/HASH}).
        "status": "New", // String: Workflow status. Initial values: "New", "Pending Review", "Approved for Enrichment", "Enrichment in Progress", "Ready for Test", "Live in Production", "Archived", "Rejected". Default: "New".
        "language": "id", // String: Target language code (e.g., "id", "en", "es").
        "cefr_level": "A1", // String: Selected CEFR level (e.g., "A1", "B2").
        "list_category_id": "theme_daily_activities", // String: Stores category_id from the 'master_categories' collection.
        "admin_notes": "Initial generation. Focused on basic verbs and common nouns for everyday use.", // String: Optional internal notes by an administrator.
        "requested_word_count": 100, // Number: The number of words initially requested by the admin.
        "generated_word_count": 98, // Number: The actual number of unique word items generated.

        // --- LLM Instructions ---
        "base_instruction_file_ref": "gs://your-bucket/base_instructions/general_vocab_v1.txt", // String: REQUIRED. Path/reference to the base instruction file.
        "custom_instruction_file_ref": "gs://your-bucket/custom_instructions/indonesian_a1_food_focus.txt", // String: OPTIONAL. Path/reference to a custom instruction file.
        "ui_text_refinements": "Ensure all vocabulary is appropriate for young learners (ages 6-8) and avoid complex sentence structures in any example phrases if generated.", // String: OPTIONAL. Text entered directly in the UI for final small adjustments.
        "final_llm_prompt_text_sent": "Concatenated text from base file, custom file (if any), and UI refinements that formed the main textual part of the prompt sent to Gemini.", // String: Log of the textual instructions sent.

        // --- Gemini API Generation Config ---
        "source_model": "gemini-1.5-flash", // String: Specific Gemini model used (e.g., "gemini-1.5-flash", "gemini-1.5-pro").
        "gemini_temperature": 0.7,       // Number: (e.g., 0.0 to 2.0).
        "gemini_top_p": 0.95,            // Number: (e.g., 0.0 to 1.0).
        "gemini_top_k": 40,              // Integer: (e.g., 1 to 100).
        "gemini_max_output_tokens": 2048, // Integer.
        "gemini_stop_sequences": ["---END---", "END OF VOCABULARY LIST"], // Array of Strings: OPTIONAL.
        "gemini_response_mime_type": "application/json", // String: e.g., "text/plain" or "application/json".
        "gemini_response_schema_used": {  // Object or String: OPTIONAL. If mimeType is JSON, this stores the schema provided to Gemini (or a reference to it). Example:
                                          // { "type": "OBJECT", "properties": { "words": { "type": "ARRAY", "items": { "type": "OBJECT", "properties": { "headword": {"type": "STRING"}, "translation_en": {"type": "STRING"}}, "required": ["headword"]}}}, "required": ["words"]}
                                        },

        "include_english_translation": true, // Boolean: Indicates if English translations were requested (may be redundant if schema defines output).
        "generation_timestamp": "Firestore.Timestamp", // Timestamp: Server-side timestamp of when this list document was created.
        "last_status_update_timestamp": "Firestore.Timestamp", // Timestamp: Server-side timestamp of the last status change.
        "generated_by": "admin_user_id_placeholder", // String: User ID or identifier of the admin who initiated the generation.
        "reviewed_by": null // String: OPTIONAL. User ID or identifier of the admin who last performed a significant review or status change.
      },
      "word_items": [ // Array of Objects
        // Each object represents a generated word. Structure depends on gemini_response_mime_type.
        // If JSON structured output with schema:
        // {"headword": "kata_contoh_1", "translation_en": "example word 1"},
        // {"headword": "kata_contoh_2", "translation_en": "example word 2"}
        // If plain text, might be simpler: {"headword": "kata_contoh_1"}
      ]
    }
    ```

## 5. Admin Panel Screens & Functionality

The admin panel will feature four primary screens. All screens should include a consistent footer displaying `Version: X.X.X | Build: Y`.

### 5.1. Screen 1: Generate New Word List

* **Purpose:** Allows an administrator to configure parameters and initiate the generation of a new vocabulary list.
* **UI Elements & Layout:** Refer to **Wireframe 1** (see Section 8).
    * **Core Parameters:** Language (dropdown), CEFR Level (dropdown A1-C2), Number of Words (input, this may be a suggestion if a JSON schema dictates array size), List Category (dropdown populated from `master_categories` collection; value=`category_id`, label=`display_name`).
    * **LLM Instructions (Layered):**
        * `Base Instruction File`: Text input for path/reference (required). A "Browse/Select" mechanism is a future enhancement.
        * `Custom Instruction File`: Text input for path/reference (optional).
        * `UI Text Refinements`: Multi-line text area (optional).
    * **Gemini API Parameters:**
        * `Model`: Dropdown to select the Gemini model.
        * `Temperature`: Slider or number input.
        * `Top P`: Slider or number input.
        * `Top K`: Slider or number input.
        * `Max Output Tokens`: Number input.
        * `Stop Sequences`: Text input (e.g., comma-separated).
        * `Response Format`: Dropdown ("Text" or "JSON").
        * `JSON Schema`: Multi-line text area (appears if "JSON" format is selected, for pasting an OpenAPI-based schema).
    * **Output Options:** `Include English Translation` checkbox (may be superseded if the JSON schema defines the output structure to include translations).
    * **Action Button:** `[ Generate Word List ]`.
    * Status/Error message display area.
* **Functionality:**
    * User configures all parameters.
    * On "Generate Word List" click:
        * Frontend validation of inputs.
        * Backend API is called.
        * Backend generates a unique `list_readable_id`.
        * Backend reads content from Base Instruction File (required) and Custom Instruction File (if provided).
        * Backend concatenates instruction sources: `Base File Content + Custom File Content + UI Text Refinements` to form `final_llm_prompt_text_sent`.
        * Backend constructs `generationConfig` for Gemini API using selected parameters.
        * Backend calls Gemini API with the prompt text and `generationConfig`.
        * Backend processes Gemini API response (parses JSON if that was the requested `responseMimeType`).
        * A new document is saved to `GeneratedWordLists` with `status: "New"`, relevant timestamps, and all `generation_parameters` and `word_items`.
        * User is notified of success (e.g., redirect to Screen 2) or failure.

### 5.2. Screen 2: View Generated Word Lists (Main Admin Dashboard)

* **Purpose:** Displays a filterable and sortable table of all previously generated vocabulary lists.
* **UI Elements & Layout:** Refer to **Wireframe 2**. Aim for a style similar to `image_55bccd.png`.
    * **Header/Navigation:** Page Title, Breadcrumbs, User/Language display, `[ + Add New Generation Task ]` button (links to Screen 1).
    * **Filter Controls:**
        * `Language`: Dropdown (dynamically populated from existing data).
        * `CEFR Level`: Dropdown (dynamically populated).
        * `List Category`: Dropdown (populated from `master_categories`; value=`category_id`, label=`display_name`).
        * `Status`: Dropdown (populated with defined workflow statuses or dynamically).
        * Buttons: `[ Apply Filters ]`, `[ Clear Filters ]`.
    * **List Display Table:**
        * **Sort:** Default by `generation_timestamp` (descending). Other columns should be sortable.
        * **Columns:** `Readable ID`, `Language`, `CEFR Level`, `Category` (displays `display_name` resolved from `list_category_id`), `Status`, `Words Gen.`, `Date Created`.
        * **Actions Column (per row):**
            * `[Details]`: Navigates to Screen 3.
            * `[Edit Meta]`: Navigates to Screen 4.
            * `[Regen]`: Navigates to Screen 1, pre-filling parameters from this list for re-generation as a *new* list.
            * `[Delete]`: Prompts for confirmation, then deletes the Firestore document.
    * **Pagination:** Standard controls.
* **Functionality:**
    * Loads and displays list summaries from Firestore, resolving `list_category_id` to `display_name` for the table.
    * Applies filters by querying Firestore.
    * Populates filter dropdowns dynamically.

### 5.3. Screen 3: Generated Word List Details

* **Purpose:** Displays all comprehensive details of a single, selected generated vocabulary list.
* **UI Elements & Layout:** Refer to **Wireframe 3**.
    * **Header:** Page Title, key identifying info (readable ID, language, CEFR, category display name, status, generation date), `[ < Back to All Lists ]` link.
    * **Generation Parameters Section:** Clearly displays all fields from the `generation_parameters` object, including resolved `display_name` for `list_category_id`. Long text fields (instructions, schema) should be in scrollable read-only areas.
    * **Word Items Section:** Displays `word_items` in a scrollable table (columns: "#", "Headword", "English Translation" (if applicable)).
* **Functionality:**
    * Loads and renders all data for a specific `GeneratedWordLists` document.
    * Data is read-only.

### 5.4. Screen 4: Edit Generated List Metadata

* **Purpose:** Allows administrators to modify specific metadata fields of an existing generated word list document.
* **UI Elements & Layout:** Refer to **Wireframe 4**.
    * **Header:** Page Title, key identifying info of the list being edited, `[ < Back to All Lists ]` link.
    * **Editable Fields Section:**
        * `Status`: Dropdown (populated with workflow statuses).
        * `List Category`: Dropdown (populated from `master_categories`; value=`category_id`, label=`display_name`).
        * `Administrator Notes`: Multi-line text area.
        * `Reviewed By`: Text input (optional).
    * **Non-Editable Reference Parameters:** Display key original parameters for context.
    * **Action Buttons:** `[ Save Changes ]`, `[ Cancel ]`.
    * Status/Error message display area.
* **Functionality:**
    * Loads existing metadata.
    * On "Save Changes": Updates the specified fields and `last_status_update_timestamp` in the Firestore document. Notifies user and typically redirects to Screen 2.

## 6. Backend API Logic Requirements

### 6.1. Generate New List (for Screen 1)

* **Method:** `POST /api/v1/generated-lists` (example path)
* **Input Payload:** Object containing all parameters from Screen 1 (language, cefr_level, num_words, list_category_id, base_instruction_file_ref, custom_instruction_file_ref, ui_text_refinements, Gemini config parameters, include_translation).
* **Processing:**
    1.  Validate inputs.
    2.  Generate unique `list_readable_id`.
    3.  Fetch content from `base_instruction_file_ref`.
    4.  Fetch content from `custom_instruction_file_ref` if provided.
    5.  Concatenate instruction sources to form `final_llm_prompt_text_sent`.
    6.  Construct `generationConfig` for Gemini API using provided parameters (`source_model`, `temperature`, `topP`, `topK`, `maxOutputTokens`, `stopSequences`, `responseMimeType`, `responseSchema`).
    7.  Call Gemini API.
    8.  Process Gemini API response:
        * If `responseMimeType` is "application/json", parse the structured JSON. The `word_items` array should be directly derived from this. The `generated_word_count` is the count of items in this array.
        * If "text/plain", parse the text to extract words and translations (this is more complex and error-prone; structured JSON is preferred).
    9.  Assemble the full `generation_parameters` object (set `status: "New"`, timestamps, etc.).
    10. Save the new document to the `GeneratedWordLists` Firestore collection.
* **Output:** JSON response with success/failure status, and potentially the new `list_readable_id` and Firestore document ID.

### 6.2. View Generated Lists (for Screen 2)

* **Method:** `GET /api/v1/generated-lists`
* **Query Parameters:** For filtering (`language`, `cefr_level`, `list_category_id`, `status`), sorting, pagination.
* **Processing:**
    * Query `GeneratedWordLists` collection with applied filters, sorting, and pagination.
    * For each returned list's `list_category_id`, resolve it to its `display_name` (from `master_categories`) to include in the response for UI display. This may involve a separate lookup or joining data if feasible.
* **Output:** JSON response with a paginated list of generated word list summaries (including resolved category display names).
* **Helper Endpoint (Optional):** `GET /api/v1/generated-lists/filter-options`
    * **Processing:** Fetches distinct values for `language`, `cefr_level`, `status` from `GeneratedWordLists` and all `category_id`/`display_name` pairs from `master_categories`.
    * **Output:** JSON object suitable for populating filter dropdowns.

### 6.3. View Single List Details (for Screen 3)

* **Method:** `GET /api/v1/generated-lists/{list_firestore_id}`
* **Path Parameter:** `list_firestore_id` (the Firestore Document ID).
* **Processing:** Fetch the full document from `GeneratedWordLists`. Resolve `list_category_id` to its `display_name`.
* **Output:** JSON response with the complete data for the specified generated list (including resolved category display name).

### 6.4. Update List Metadata (for Screen 4)

* **Method:** `PATCH /api/v1/generated-lists/{list_firestore_id}/metadata`
* **Path Parameter:** `list_firestore_id`.
* **Input Payload:** Object with fields to update (e.g., `status`, `list_category_id`, `admin_notes`, `reviewed_by`).
* **Processing:**
    * Validate inputs.
    * Update the specified fields in the Firestore document.
    * Set/update `last_status_update_timestamp`.
    * If `reviewed_by` is provided and status changes to a review-dependent state, update it.
* **Output:** JSON response with success/failure status.

## 7. General Considerations

* **Error Handling:** Implement robust error handling for all API calls (Gemini, Firestore), file operations, and user input validation. Provide clear, user-friendly feedback on the UI.
* **User Authentication/Authorization:** All admin panel screens and API endpoints must be protected and accessible only to authorized administrative users.
* **File References:** The mechanism for resolving `base_instruction_file_ref` and `custom_instruction_file_ref` (e.g., GCS paths, local paths relative to the app, database IDs for instruction templates) needs to be robust. Initially, these can be GCS paths or predefined application-relative paths.
* **Data Structures & Consistency:**
    * Strictly adhere to the defined Firestore structure.
    * Ensure `list_category_id` values correctly reference `category_id` from the `master_categories` collection (as shown in `image_569663.png`).
    * Handle localization of `display_name` for categories consistently if the admin panel supports multiple languages.
    * Consider the implications of schema evolution for instruction files and JSON schemas for Gemini.

## 8. Textual Wireframe Layouts

*(All screens should include a footer: `Version: X.X.X | Build: Y`)*

### Wireframe 1: Generate New Word List Screen

```
+---------------------------------------------------------------------------------+
| ADMIN PANEL - Generate New Vocabulary List                                      |
+---------------------------------------------------------------------------------+
| [Navigation: View Generated Lists]                                              |
+---------------------------------------------------------------------------------+
|  SECTION 1: CORE PARAMETERS                                                     |
|  Language:                 [ Dropdown: Select Language ]                        |
|  CEFR Level:               [ Dropdown: Select Level (A1-C2) ]                   |
|  Approx. Number of Words:  [ InputText: e.g., 100 ] (May be guided by schema)   |
|  List Category:            [ Dropdown: Populated from master_categories ]       |
|                                                                                 |
|  SECTION 2: LLM INSTRUCTIONS (Layered)                                          |
|  Base Instruction File Ref: [ InputText: Path/ID (Required) ] [Browse/Select?]  |
|  Custom Instr. File Ref:  [ InputText: Path/ID (Optional) ] [Browse/Select?]  |
|  UI Text Refinements:                                                           |
|  [ TextArea: (Optional, for final small adjustments) ]                          |
|                                                                                 |
|  SECTION 3: GEMINI API PARAMETERS                                               |
|  Model:                    [ Dropdown: Select Gemini Model ]                    |
|  Temperature (0.0-2.0):    [ Slider or InputNumber: e.g., 0.7 ]                 |
|  Top P (0.0-1.0):          [ Slider or InputNumber: e.g., 0.95 ]                |
|  Top K (e.g., 1-100):      [ Slider or InputNumber: e.g., 40 ]                  |
|  Max Output Tokens:        [ InputNumber: e.g., 2048 ]                          |
|  Stop Sequences (comma-sep):[ InputText: e.g., END; --- ]                       |
|  Response Format:          [ Dropdown: [Text] | [JSON] ]                         |
|  JSON Schema (if Response Format is JSON):                                      |
|  [ TextArea: (Optional, for OpenAPI schema snippet) ]                           |
|                                                                                 |
|  SECTION 4: OUTPUT OPTIONS (May be superseded/informed by JSON Schema)          |
|  [Checkbox] Include English Translation (If not defined by schema)              |
|                                                                                 |
|  SECTION 5: ACTIONS                                                             |
|  [ Button: Generate Word List ]                                                 |
|  [Status/Error Message Area]                                                    |
+---------------------------------------------------------------------------------+
| Footer: Version: X.X.X | Build: Y                                               |
+---------------------------------------------------------------------------------+
```

### Wireframe 2: View Generated Word Lists Screen

```
+-----------------------------------------------------------------------------------------------------------------------------------+
| ADMIN PANEL - Generated Vocabulary Lists                                                                                          |
| [Breadcrumbs: Home / Generated Lists]                                                                 [User: admin | English (US)▼] |
+-----------------------------------------------------------------------------------------------------------------------------------+
| [ Button: + Add New Generation Task ]                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------+
| FILTERS: Lang: [All|...] CEFR: [All|...] Cat: [All|CatDisplayNames...] Status: [All|New|PendReview|...] [Apply] [Clear]              |
+-----------------------------------------------------------------------------------------------------------------------------------+
| GENERATED LISTS TABLE (Sorted by Date Descending):                                                                                |
| +----------------+----------+------+-----------------+---------------------+-----------+--------------+---------------------------+
| | Readable ID    | Language | CEFR | Category        | Status              | Words Gen.| Date Created | Actions                   |
| |                |          |      | (display_name)  |                     |           |              |                           |
| +================+==========+======+=================+=====================+===========+==============+===========================+
| | ID-B1-250507-001 | Indo     | B1   | Business Travel | ApprovedForEnrichment | 985       | May 07, 2025 | [Det] [Edit] [Regen] [Del] |
| | EN-A2-250506-001 | English  | A2   | Adjectives 101  | New                 | 50        | May 06, 2025 | [Det] [Edit] [Regen] [Del] |
+----------------+----------+------+-----------------+---------------------+-----------+--------------+---------------------------+
| PAGINATION:  [ << Prev ] [ 1 ] [ 2 ] [ 3 ] [ Next >> ]                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------+
| Footer: Version: X.X.X | Build: Y                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------+
```
*(Note: Shortened action button labels `[Det] [Edit] [Regen] [Del]` for table conciseness; tooltips can show full names.)*

### Wireframe 3: Generated Word List Details Screen

```
+-----------------------------------------------------------------------------------+
| ADMIN PANEL - Word List Details                                                   |
+-----------------------------------------------------------------------------------+
| [ Link: < Back to All Lists ]                                                     |
| List ID: [list_readable_id] | Lang: [lang] | CEFR: [cefr] | Cat: [cat_display_name]|
| Generated: [date] | Status: [status_display_name]                                 |
+-----------------------------------------------------------------------------------+
| == GENERATION PARAMETERS ==                                                       |
| List Readable ID:             [value]                                           |
| Status:                       [value_display_name]                              |
| Language:                     [value]                                           |
| CEFR Level:                   [value]                                           |
| List Category (ID):           [list_category_id] ([category_display_name])      |
| Admin Notes:                  [scrollable_text_value_or_N/A]                    |
| Requested Words:              [X]          | Generated Words: [Y]                 |
| Include English Translation:  [Yes/No]                                          |
| Generation Timestamp:         [value]                                           |
| Last Status Update:           [value]                                           |
| Generated By:                 [value]                                           |
| Reviewed By:                  [value_or_N/A]                                    |
|                                                                                   |
| == LLM Instructions & Config ==                                                   |
| Source Model:                 [value]                                           |
| Base Instruction File Ref:    [value]                                           |
| Custom Instruction File Ref:  [value_or_N/A]                                    |
| UI Text Refinements:          [scrollable_text_value_or_N/A]                    |
| Final LLM Prompt Text Sent:   [scrollable_text_value]                           |
| Gemini Temperature:           [value]      | Top P:           [value]            |
| Top K:                       [value]      | Max Output Tokens: [value]           |
| Stop Sequences:              [value_or_N/A]                                    |
| Response MIME Type:          [value]                                           |
| Response Schema Used:         [scrollable_text_schema_or_N/A]                   |
+-----------------------------------------------------------------------------------+
| == WORD ITEMS ([generated_word_count] words) ==                                   |
| +---+--------------------------+----------------------------------------------+ |
| | # | Headword                 | English Translation (if applicable)          | |
| +===+==========================+==============================================+ |
| | 1 | example_word_1           | example_translation_1                        | |
| | 2 | example_word_2           | example_translation_2                        | |
| +---+--------------------------+----------------------------------------------+ |
| (This table should be scrollable if the word list is long)                       |
+-----------------------------------------------------------------------------------+
| Footer: Version: X.X.X | Build: Y                                                 |
+-----------------------------------------------------------------------------------+
```

### Wireframe 4: Edit Generated List Metadata Screen

```
+-----------------------------------------------------------------------------------+
| ADMIN PANEL - Edit Metadata for Generated List                                    |
+-----------------------------------------------------------------------------------+
| [ Link: < Back to All Lists ]                                                     |
| Editing List: [list_readable_id] (Lang: [lang] | CEFR: [cefr])                   |
| Generated: [date] | Current Status: [current_status_display_name]                 |
+-----------------------------------------------------------------------------------+
|  EDITABLE METADATA:                                                               |
|  Status:               [ Dropdown: Populated with workflow statuses ]              |
|  List Category:        [ Dropdown: Populated from master_categories ]              |
|  Administrator Notes:                                                             |
|  [ TextArea: (current admin_notes content or empty) ]                             |
|  Reviewed By:          [ InputText: (current value or empty for new input) ]     |
|                                                                                   |
|  NON-EDITABLE REFERENCE (Original Generation Parameters - Key Snippets):          |
|  Requested Words: [X] | Generated Words: [Y] | Model: [gemini_model]            |
|                                                                                   |
|  ACTIONS:                                                                         |
|  [ Button: Save Changes ]   [ Button: Cancel ]                                    |
|  [Status/Error Message Area]                                                      |
+-----------------------------------------------------------------------------------+
| Footer: Version: X.X.X | Build: Y                                                 |
+-----------------------------------------------------------------------------------+
```

This Markdown document should now provide a complete specification for your coding agent.
```